{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Deployment": {
      "type": "string"
    },
    "DeploymentID": {
      "type": "string"
    },
    "NATPools": {
      "type": "array",
      "defaultValue": [1]
    },
    "LB": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "OMSworkspaceID": {
      "type": "string"
    }
  },
  "variables": {
    // Network
    "networkId": "[concat(parameters('Global').networkid[0],string(           sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID'))))))]",
    "networkIdUpper": "[concat(parameters('Global').networkid[0],string(add(1,sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID')))))))]",
    "addressPrefixes": [
      "[concat(variables('networkId'),'.0/23')]"
    ],
    "Domain": "[split(parameters('Global').DomainName,'.')[0]]",
    // subscriptionId
    "subscriptionId": "[subscription().subscriptionId]",
    // rgName
    "resourceGroupName": "[resourceGroup().name]",
    "VNetID": "[resourceId(variables('subscriptionId'),variables('ResourceGroupName'), 'Microsoft.Network/VirtualNetworks', concat(parameters('Deployment'),'-vn'))]",

    "copy": [
      {
        "name": "NATPools",
        "count": "[if(equals(parameters('NATPools')[0],1),1,Length(parameters('NATPools')))]",
        "input": {
          "name": "[if(equals(parameters('NATPools')[0],1),1,parameters('NATPools')[copyIndex('NATPools')].Name)]",
          "properties": {
            "protocol": "[if(equals(parameters('NATPools')[0],1),1,parameters('NATPools')[copyIndex('NATPools')].protocol)]",
            "frontendPortRangeStart": "[if(equals(parameters('NATPools')[0],1),1,parameters('NATPools')[copyIndex('NATPools')].frontendPortRangeStart)]",
            "frontendPortRangeEnd": "[if(equals(parameters('NATPools')[0],1),1,parameters('NATPools')[copyIndex('NATPools')].frontendPortRangeEnd)]",
            "backendPort": "[if(equals(parameters('NATPools')[0],1),1,parameters('NATPools')[copyIndex('NATPools')].backendPort)]",
            "frontendIPConfiguration": {
              "id": "[if(equals(parameters('NATPools')[0],1),1,concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/frontendIPConfigurations/',parameters('NATPools')[copyIndex('NATPools')].LBFEName))]"
            }
          }
        }
      }
    ]

    /*
    "inboundNatPools": [
      {
        "id": "string",
        "properties": {
          "frontendIPConfiguration": {
            "id": "string"
          },
          "protocol": "string",
          "frontendPortRangeStart": "integer",
          "frontendPortRangeEnd": "integer",
          "backendPort": "integer"
        },
        "name": "string"
      }
    ],
    */
  },
  "resources": [
    {
      "name": "[concat(parameters('Deployment'),'-lb',parameters('LB').Name)]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2018-03-01",
      "location": "[resourceGroup().location]",
      "sku": "[if(contains(parameters('LB'),'Sku'),json( concat('{\"name\":\"',parameters('LB').Sku,'\"}')),json('null'))]",
      "dependsOn": [],
      "properties": {
        "backendAddressPools": [
          {
            "name": "[parameters('LB').ASName]"
          }
        ],
        "inboundNatPools": "[if(equals(parameters('NatPools')[0],1),json('null'),variables('NatPools'))]",
        "copy": [
          {
            "name": "frontendIPConfigurations",
            "count": "[length(parameters('LB').FrontEnd)]",
            "input": {
              "name": "[parameters('LB').FrontEnd[copyIndex('frontendIPConfigurations')].LBFEName]",
              "properties": {
                "privateIPAllocationMethod": "[if( equals(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurations')].Type,'Private'), 'Static',json('null'))]",
                "privateIPAddress": "[if( equals(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurations')].Type,'Private'), concat(if(equals(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurations')].SNName,'MT02'),variables('networkIdUpper'),variables('networkId')),'.',parameters('LB').FrontEnd[copyIndex('frontendIPConfigurations')].LBFEIP),json('null'))]",
                "subnet": "[if( equals(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurations')].Type,'Private'), json( concat('{\"id\":\"',concat(variables('VNetID'), '/subnets/sn', parameters('LB').FrontEnd[copyIndex('frontendIPConfigurations')].SNName) ,'\"}')), json('null'))]",
                "publicIPAddress": "[if( equals(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurations')].Type,'Private'), json('null'), json( concat('{\"id\":\"',string(resourceid('Microsoft.Network/publicIPAddresses',concat(parameters('Deployment'),'-',parameters('LB').Name,'-publicip', copyIndex('frontendIPConfigurations',1)))),'\"}')))]"
              }
            }
          },
          {
            "name": "loadBalancingRules",
            "count": "[length(parameters('LB').Services)]",
            "input": {
              "name": "[parameters('LB').Services[copyIndex('loadBalancingRules')].RuleName]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/frontendIPConfigurations/',parameters('LB').Services[copyIndex('loadBalancingRules')].LBFEName)]"
                },
                "backendAddressPool": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/backendAddressPools/',parameters('LB').ASName)]"
                },
                "probe": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/probes/',parameters('LB').Services[copyIndex('loadBalancingRules')].ProbeName)]"
                },
                "protocol": "[if(contains(parameters('LB').Services[copyIndex('loadBalancingRules')],'protocol'),parameters('LB').Services[copyIndex('loadBalancingRules')].Protocol ,'tcp')]",
                "frontendPort": "[parameters('LB').Services[copyIndex('loadBalancingRules')].LBFEPort]",
                "backendPort": "[parameters('LB').Services[copyIndex('loadBalancingRules')].LBBEPort]",
                "enableFloatingIP": "[if(contains(parameters('LB').Services[copyIndex('loadBalancingRules')],'DirectReturn'),parameters('LB').Services[copyIndex('loadBalancingRules')].DirectReturn ,bool('false'))]"
              }
            }
          },
          {
            "name": "probes",
            "count": "[length(parameters('LB').Probes)]",
            "input": {
              "name": "[parameters('LB').Probes[copyIndex('probes')].ProbeName]",
              "properties": {
                "protocol": "Tcp",
                "port": "[parameters('LB').Probes[copyIndex('probes')].LBBEProbePort]",
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          }
        ]
      },
      "resources": [
        {
          "type": "providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "dependsOn": [
            "[concat(parameters('Deployment'),'-lb',parameters('LB').Name)]"
          ],
          "apiVersion": "2015-07-01",
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "logs": [
              {
                "category": "LoadBalancerAlertEvent",
                "enabled": true
              },
              {
                "category": "LoadBalancerProbeHealthStatus",
                "enabled": true
              }
            ],
            "metrics": [
              {
                "timeGrain": "PT5M",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "outputs": {
    "foo2": {
      "type": "array",
      "value": "[parameters('NATPools')]"
    }
  }
}