{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Prefix": {
      "type": "string",
      "defaultValue": "AZE2",
      "allowedValues": [
        "AZE2",
        "AZC1",
        "AEU2",
        "ACU1"
      ]
    },
    "Environment": {
      "type": "string",
      "defaultValue": "D",
      "allowedValues": [
        "I",
        "D",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    },
    "vmAdminPassword": {
      "type": "securestring"
    },
    "devOpsPat": {
      "type": "securestring"
    },
    "sshPublic": {
      "type": "securestring"
    }
  },
  "variables": {
    // subscriptionId
    "subscriptionId": "[subscription().subscriptionId]",
    // rgName
    "resourceGroupName": "[resourceGroup().name]",
    // Global  BRWDev101
    "Deployment": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').Appname,'-',parameters('Environment'),parameters('DeploymentID'))]",

    // Settings for Log Analytics
    "OMSworkspaceName": "[replace(concat(variables('Deployment'),'LogAnalytics'),'-','')]",
    "OMSworkspaceID": "[resourceid('Microsoft.OperationalInsights/workspaces/',variables('OMSworkspaceName'))]",

    // Network
    "networkId": "[concat(parameters('Global').networkid[0],string(           sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID'))))))]",
    "networkIdUpper": "[concat(parameters('Global').networkid[0],string(add(1,sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID')))))))]",
    "addressPrefixes": [
      "[concat(variables('networkId'),'.0/23')]"
    ],
    "DNSServers": "[parameters('Global').DNSServers]",
    "Domain": "[split(parameters('Global').DomainName,'.')[0]]",
    "RouteTableGlobal": {
      "id": "[resourceid(parameters('Global').HubRGName,'Microsoft.Network/routeTables/',concat(replace(parameters('Global').hubVnetName,'vn','rt'),variables('Domain'),parameters('Global').RTName))]"
    },
    "SubnetInfo": "[parameters('DeploymentInfo').SubnetInfo]",

    // Peer back to Hub, unless Secondary region Hub, then Peer back to Primary Region Hub.
    "hubVnetName": "[if(contains(parameters('DeploymentInfo'),'hubRegionPrefix'),
                        replace(parameters('Global').hubVnetName,parameters('Prefix'),parameters('DeploymentInfo').hubRegionPrefix),
                        parameters('Global').hubVnetName
                      )]",
    "hubVnetResourceGroupName": "[if(contains(parameters('DeploymentInfo'),'hubRegionPrefix'),
                        replace(parameters('Global').hubRGName,parameters('Prefix'),parameters('DeploymentInfo').hubRegionPrefix),
                        parameters('Global').hubRGName
                      )]",
    "hubVnetResourceSubscriptionID": "[parameters('Global').hubSubscriptionID]",
    "Deploymentnsg": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-', parameters('Global').AppName,'-',parameters('Environment'),parameters('DeploymentID'),if(equals( concat(parameters('Environment'),parameters('DeploymentID')),'P0') ,'-Hub','-Spoke'))]",
    "delegations": {
      "default": [
      ],
      "Microsoft.Web/serverfarms": [
        {
          "name": "delegation",
          "properties": {
            "serviceName": "Microsoft.Web/serverfarms"
          }
        }
      ],
      "Microsoft.ContainerInstance/containerGroups": [
        {
          "name": "aciDelegation",
          "properties": {
            "serviceName": "Microsoft.ContainerInstance/containerGroups"
          }
        }
      ]
    }
  },
  "resources": [
    {
      "name": "[concat(Variables('Deployment'),'-vn')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-12-01",
      "dependsOn": [
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[variables('addressPrefixes')]"
        },
        "dhcpOptions": {
          "dnsServers": "[array(variables('DNSServers'))]"
        },
        "copy": [
          {
            "name": "subnets",
            "count": "[length(variables('SubnetInfo'))]",
            "input": {
              "name": "[concat(variables('SubnetInfo')[copyIndex('subnets')].name)]",
              "properties": {
                // "addressPrefix": "[concat(if(or(equals(variables('SubnetInfo')[copyIndex('subnets')].name,'snMT02'),equals(variables('SubnetInfo')[copyIndex('subnets')].name,'snMT01')),variables('networkIdUpper'),variables('networkId')),'.',variables('SubnetInfo')[copyIndex('subnets')].Prefix)]",
                "addressPrefix": "[concat(if(equals(variables('SubnetInfo')[copyIndex('subnets')].name,'snMT02'),variables('networkIdUpper'),variables('networkId')),'.',variables('SubnetInfo')[copyIndex('subnets')].Prefix)]",
                "networkSecurityGroup": "[if(and(
                                                  contains(variables('SubnetInfo')[copyIndex('subnets')],'NSG' ), 
                                                  equals(variables('SubnetInfo')[copyIndex('subnets')].NSG,1)
                                                ),
                                              json( concat('{\"id\":\"',string(resourceid('Microsoft.Network/networkSecurityGroups',concat(variables('Deploymentnsg'),'-nsg',variables('SubnetInfo')[copyIndex('subnets')].name))),'\"}')), 
                                              json('null')
                                            )]",
                // "networkSecurityGroup": "[if( and(contains(variables('SubnetInfo')[copyIndex('subnets')],'NSG' ), or(equals(variables('SubnetInfo')[copyIndex('subnets')].NSG,'Hub'),equals(variables('SubnetInfo')[copyIndex('subnets')].NSG,'Spoke'))) , json( concat('{\"id\":\"',string(resourceid(parameters('Global').HubRGName,'Microsoft.Network/networkSecurityGroups',concat(variables('Deploymentnsg'),       variables('SubnetInfo')[copyIndex('subnets')].NSG,'-nsg',variables('SubnetInfo')[copyIndex('subnets')].name))),'\"}')) , json('null'))]",
                "routeTable": "[if( 
                                    and(contains(variables('SubnetInfo')[copyIndex('subnets')],'Route'), 
                                          equals(variables('SubnetInfo')[copyIndex('subnets')].Route,1)), 
                                          variables('RouteTableGlobal'),
                                    json('null'))]",
                // "serviceEndpoints": "[if( and(contains(variables('SubnetInfo')[copyIndex('subnets')],'serviceEndpoints'), equals(variables('SubnetInfo')[copyIndex('subnets')].serviceEndpoints,1))variables('serviceEndpoints'),json('null'))]",
                "privateEndpointNetworkPolicies": "Disabled",
                "delegations": "[if(contains(variables('SubnetInfo')[copyIndex('subnets')],'delegations'),variables('delegations')[variables('SubnetInfo')[copyIndex('subnets')].delegations],variables('delegations')['default'])]"
              }
            }
          }
        ]
      },
      "resources": [
        {
          "condition": "[equals(parameters('Stage').VNetPeering,1)]",
          "name": "[concat(Variables('Deployment'),'-vn--',Variables('hubVnetName'))]",
          "type": "virtualNetworkPeerings",
          "apiVersion": "2017-10-01",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks',concat(Variables('Deployment'),'-vn'))]"
          ],
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": true,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[resourceId(variables('hubVnetResourceSubscriptionID'),variables('hubVnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('hubVnetName'))]"
            }
          }
        },
        {
          "type": "providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks',concat(Variables('Deployment'),'-vn'))]"
          ],
          "apiVersion": "2015-07-01",
          "properties": {
            "workspaceId": "[variables('OMSworkspaceID')]",
            "logs": [
              {
                "category": "VMProtectionAlerts",
                "enabled": true
              }
            ]
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('Stage').VNetPeering,1)]",
      "apiVersion": "2019-05-01",
      "name": "nestedTemplate_Peering",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('hubVnetResourceGroupName')]",
      "subscriptionId": "[variables('hubVnetResourceSubscriptionID')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',concat(Variables('Deployment'),'-vn'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
          },
          "variables": {
          },
          "resources": [
            {
              "name": "[concat(variables('hubVnetName'),'/',variables('hubVnetName'),'--',variables('Deployment'),'-vn')]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2017-10-01",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId(variables('subscriptionId'),variables('ResourceGroupName'),'Microsoft.Network/virtualNetworks',concat(variables('Deployment'),'-vn'))]"
                }
              }
            }
          ]
        },
        "parameters": {
        }
      }
    },
    {
      "condition": "[and(
                      contains(parameters('Stage'),'LinkPrivateDns'),
                      equals(parameters('Stage').LinkPrivateDns,1)
                      )]",
      "apiVersion": "2019-10-01",
      "name": "[concat('privateDnsZones-vnLink-',copyIndex(1))]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(variables('resourceGroupName'),concat(parameters('Environment'),parameters('DeploymentID')),if(contains(parameters('DeploymentInfo'),'LinkPrivateDnsInfo'),parameters('DeploymentInfo').LinkPrivateDnsInfo[copyIndex(0)].ZoneRG,''))]",
      "subscriptionId": "[variables('hubVnetResourceSubscriptionID')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks',concat(Variables('Deployment'),'-vn'))]"
      ],
      "copy": {
        "name": "DNSZoneLoop",
        "count": "[if(contains(parameters('DeploymentInfo'),'LinkPrivateDnsInfo'),length(parameters('DeploymentInfo').LinkPrivateDnsInfo),1)]"
      },
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
          },
          "variables": {
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[concat(if(contains(parameters('DeploymentInfo'),'LinkPrivateDnsInfo'),parameters('DeploymentInfo').LinkPrivateDnsInfo[copyIndex(0)].zone,''),'/',Variables('Deployment'),'-vn-',if(contains(parameters('DeploymentInfo'),'LinkPrivateDnsInfo'),parameters('DeploymentInfo').LinkPrivateDnsInfo[copyIndex(0)].zone,''))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks',concat(Variables('Deployment'),'-vn'))]"
                }
              }
            }
          ]
        },
        "parameters": {
        }
      }
    }
  ],
  "outputs": {
    "VnetID": {
      "value": "[variables('networkId')]",
      "type": "string"
    }
  }
}