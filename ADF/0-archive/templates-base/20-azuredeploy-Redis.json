{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Prefix": {
      "type": "string",
      "defaultValue": "AZE2",
      "allowedValues": [
        "AZE2",
        "AZC1",
        "AEU2",
        "ACU1"
      ]
    },
    "Environment": {
      "type": "string",
      "defaultValue": "D",
      "allowedValues": [
        "I",
        "D",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    },
    "vmAdminPassword": {
      "type": "securestring"
    },
    "devOpsPat": {
      "type": "securestring"
    },
    "sshPublic": {
      "type": "securestring"
    }
  },
  "variables": {
    // Global  BRWDev101
    "Deployment": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').Appname,'-',parameters('Environment'),parameters('DeploymentID'))]",
    "DeploymentURI": "[toLower(concat(parameters('Prefix'),parameters('Global').OrgName,parameters('Global').Appname,parameters('Environment'),parameters('DeploymentID')))]",

    // subscriptionId
    "subscriptionId": "[subscription().subscriptionId]",
    // rgName
    //"resourceGroupName": "[resourceGroup().name]",
    "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', concat(Variables('Deployment'),'-vn'))]",
    "snWAF01Name": "snWAF01",
    "SubnetRefGW": "[concat(variables('VNetID'), '/subnets/', variables('snWAF01Name'))]",
    "networkId": "[concat(parameters('Global').networkid[0],string(           sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID'))))))]",
    "networkIdUpper": "[concat(parameters('Global').networkid[0],string(add(1,sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID')))))))]",

    "OMSworkspaceName": "[replace(concat(variables('Deployment'),'LogAnalytics'),'-','')]",
    "OMSworkspaceID": "[resourceid('Microsoft.OperationalInsights/workspaces/',variables('OMSworkspaceName'))]",
    "RedisInfo": "[parameters('DeploymentInfo').RedisInfo]",
    "appConfigurationInfo": "[if(contains(parameters('DeploymentInfo'),'appConfigurationInfo'),parameters('DeploymentInfo').appConfigurationInfo,json('null'))]",
    "SKULookup": {
      "B0": {
        "name": "Basic",
        "family": "C",
        "capacity": 0
      },
      "B1": {
        "name": "Basic",
        "family": "C",
        "capacity": 1
      },
      "C0": {
        "name": "Standard",
        "family": "C",
        "capacity": 0
      },
      "C1": {
        "name": "Standard",
        "family": "C",
        "capacity": 1
      },
      "C2": {
        "name": "Standard",
        "family": "C",
        "capacity": 2
      },
      "C3": {
        "name": "Standard",
        "family": "C",
        "capacity": 3
      },
      "P1": {
        "name": "Premium",
        "family": "P",
        "capacity": 1
      }
    },
    "RedisConfiguration": {
      "Default": {
        "maxclients": "1000",
        "maxmemory-reserved": 50,
        "maxfragmentationmemory-reserved": "50",
        "maxmemory-delta": "50"
      },
      "Basic": {}
    }
  },
  "resources": [
    {
      "name": "[tolower(concat(variables('Deployment'),'-rc',variables('RedisInfo')[copyIndex()].Name))]",
      "type": "Microsoft.Cache/Redis",
      "apiVersion": "2019-07-01",
      "location": "Central US",
      "copy": {
        "name": "RedisCopy",
        "count": "[length(variables('RedisInfo'))]"
      },
      "properties": {
        "sku": "[variables('SKULookup')[variables('RedisInfo')[copyIndex()].sku]]",
        "enableNonSslPort": "[if(contains(variables('RedisInfo')[copyIndex()],'enableNonSslPort'),variables('RedisInfo')[copyIndex()].enableNonSslPort,bool('false'))]",
        "redisConfiguration": "[if(
                                  equals(variables('SKULookup')[variables('RedisInfo')[copyIndex()].sku].name,'Basic'),
                                          variables('RedisConfiguration')['Basic'],
                                          variables('RedisConfiguration')['Default']
                                    )]"
      },
      "resources": [
        {
          "type": "providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "dependsOn": [
            "[tolower(concat(variables('Deployment'),'-rc',variables('RedisInfo')[copyIndex()].Name))]"
          ],
          "apiVersion": "2017-05-01-preview",
          "properties": {
            "workspaceId": "[variables('OMSworkspaceID')]",
            "metrics": [
              {
                "timeGrain": "PT5M",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        },
        {
          "condition": "[not(equals(variables('appConfigurationInfo'),json('null')))]",
          "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
          "apiVersion": "2020-07-01-preview",
          "name": "[concat(variables('Deployment'),'-ac',if(contains(variables('appConfigurationInfo'),'Name'),variables('appConfigurationInfo').Name,''),'/RedisKey-',variables('RedisInfo')[copyIndex()].Name)]",
          "dependsOn": [
            "[tolower(concat(variables('Deployment'),'-rc',variables('RedisInfo')[copyIndex()].Name))]"
          ],
          "properties": {
            "value": "[listKeys(resourceId('Microsoft.Cache/redis', tolower(concat(variables('Deployment'),'-rc',variables('RedisInfo')[copyIndex()].Name))), '2020-06-01').primaryKey]",
            "contentType": "richtext"
            // "tags": "[variables('Deployment')]"
          }
        }
      ]
    }
  ],
  "outputs": {
  }
}