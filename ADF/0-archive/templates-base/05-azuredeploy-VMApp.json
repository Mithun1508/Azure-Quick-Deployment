{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Prefix": {
      "type": "string",
      "defaultValue": "AZE2",
      "allowedValues": [
        "AZE2",
        "AZC1",
        "AEU2",
        "ACU1"
      ]
    },
    "Environment": {
      "type": "string",
      "defaultValue": "D",
      "allowedValues": [
        "I",
        "D",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    },

    "deploymentTime": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    },
    "vmAdminPassword": {
      "type": "securestring"
    },
    "devOpsPat": {
      "type": "securestring"
    },
    "sshPublic": {
      "type": "securestring"
    }
  },
  "variables": {
    // Global  This Deployment variable is used to name EVERY resource.
    "Deployment": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').Appname,'-',parameters('Environment'),parameters('DeploymentID'))]",
    "DeploymentURI": "[toLower(concat(parameters('Prefix'),parameters('Global').OrgName,parameters('Global').Appname,parameters('Environment'),parameters('DeploymentID')))]",
    "RGName": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').AppName,'-RG-',parameters('Environment'),parameters('DeploymentID') )]",
    "GlobalRGName": "[parameters('Global').GlobalRGName]",

    "AAResourceGroup": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').Appname,'-RG-P0')]",
    "AAName": "[concat(parameters('Prefix'),parameters('Global').OrgName,parameters('Global').Appname,'P0','OMSAutomation')]",

    "subscriptionId": "[subscription().subscriptionId]",
    "resourceGroupName": "[resourceGroup().name]",

    // this is just used for tagging the VM
    "Environment": {
      "D": "Dev",
      "I": "Int",
      "U": "UAT",
      "P": "PROD",
      "S": "SBX"
    },
    "VMSizeLookup": {
      "D": "D",
      "I": "D",
      "U": "D",
      "P": "P",
      "S": "D"
    },
    "RebootNodeLookup": {
      "D": true,
      "Q": true,
      "T": true,
      "U": true,
      "P": false
    },
    "ConfigurationMode": {
      "D": "ApplyAndAutoCorrect",
      "Q": "ApplyAndAutoCorrect",
      "T": "ApplyAndAutoCorrect",
      "U": "ApplyAndAutoCorrect",
      "P": "ApplyAndMonitor"
    },

    // set this value to higher to save money on logs for larger environments,
    // also consider having dev environment with 15 mins, then other envs with higer values e.g. 120
    "DSCConfigurationModeFrequencyMins": 15,

    "KVUrl": "[concat('https://',parameters('Global').KVName,'.vault.azure.net/')]",
    "secrets": [
      {
        "sourceVault": {
          "id": "[resourceId(parameters('Global').HubRGName, 'Microsoft.KeyVault/vaults', parameters('Global').KVName)]"
        },
        "vaultCertificates": [
          {
            "certificateUrl": "[parameters('Global').certificateUrl]",
            "certificateStore": "My"
          },
          {
            "certificateUrl": "[parameters('Global').certificateUrl]",
            "certificateStore": "Root"
          },
          {
            "certificateUrl": "[parameters('Global').certificateUrl]",
            "certificateStore": "CA"
          }
        ]
      }
    ],
    "copy": [
      {
        "name": "VM",
        "count": "[length(parameters('DeploymentInfo').AppServers[deployment().name])]",
        "input": {
          "name": "[parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')].Name]",
          "matchVM": "[if(or(equals(parameters('Global').CN,'.'),contains(parameters('Global').CN,parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')].Name)),bool('true'),bool('false'))]",
          "Extensions": "[if(contains(variables('OSType')[parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')].OSType],'RoleExtensions'),union(parameters('Extensions'),variables('OSType')[parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')].OSType].RoleExtensions),parameters('Extensions'))]",
          "DataDisk": "[if(contains(parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')],'DDRole'), variables('DataDiskInfo')[parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')].DDRole],json('null'))]",
          "vmHostName": "[toLower(concat(parameters('Prefix'),parameters('Global').AppName,parameters('Environment'),parameters('DeploymentID'),parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')].Name))]",
          "AppInfo": "[if(contains(parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')],'AppInfo'),parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('VM')].AppInfo,json('null'))]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": true,
            "provisionVmAgent": true,
            "patchSettings": {
              "enableHotpatching": "[if(contains(variables('AppServers')[copyIndex('VM')],'HotPatch'),variables('AppServers')[copyIndex('VM')].HotPatch,bool('false'))]",
              "patchMode": "AutomaticByOS"
            }
          }
        }
      },
      {
        "name": "ASNAME",
        "count": "[length(parameters('DeploymentInfo').AppServers[deployment().name])]",
        "Input": "[if(contains(parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('ASNAME')],'Zone'),'usingZones',parameters('DeploymentInfo').AppServers[deployment().name][copyIndex('ASNAME')].ASNAME )]"
      }
    ],

    //  Moved to tenants/<tenantname>/Global-ConfigVM.json
    "OSType": "[json(parameters('Global').OSType)]",
    "WadCfg": "[json(parameters('Global').WadCfg)]",
    "ladCfg": "[json(parameters('Global').ladCfg)]",
    "DataDiskInfo": "[json(parameters('Global').DataDiskInfo)]",
    "computeSizeLookupOptions": "[json(parameters('Global').computeSizeLookupOptions)]",

    "DeploymentName": "[if(contains (tolower(deployment().name), 'vmapp'),'AppServers',replace(deployment().name, concat('dp',variables('Deployment'),'-'), ''))]",
    "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
    "DSCConfigLookup": {
      "AppServers": "AppServers",
      "InitialDOP": "AppServers",
      "WVDServers": "AppServers"
    },

    // Network, used for Cluster/AG/DNS IP's
    "networkId": "[concat(parameters('Global').networkid[0],string(sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID'))))))]",
    // Settings for Log Analytics
    "OMSworkspaceName": "[replace(concat(variables('Deployment'),'LogAnalytics'),'-','')]",
    "OMSworkspaceID": "[resourceid('Microsoft.OperationalInsights/workspaces/',variables('OMSworkspaceName'))]",
    //"VNetID": "[resourceId(variables('subscriptionId'),variables('ResourceGroupName'), 'Microsoft.Network/VirtualNetworks', concat(Variables('Deployment'),'-vn'))]",
    //Storage Account type used for managed disks
    "storageAccountType": "[if(equals(parameters('Environment'),'P'), 'Premium_LRS', 'Standard_LRS')]",
    // used for SQL only
    "saSQLBackupName": "[toLower(replace(concat(variables('Deployment'), 'sasqlbackup'),'-',''))]",
    // "saWitnessName": "[toLower(replace(concat(variables('Deployment'), 'sawitness'),'-',''))]",
    //"saaccountidWitness": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Storage/storageAccounts/', variables('saWitnessName'))]",
    // storage accounts diag + deployment source files
    "SADiagName": "[toLower(concat(replace(variables('Deployment'),'-',''),'sadiag'))]",
    "saaccountiddiag": "[resourceid('Microsoft.Storage/storageAccounts/',variables('SADiagName'))]",
    "saaccountidglobalsource": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',variables('GlobalRGName'),'/providers/Microsoft.Storage/storageAccounts/', parameters('Global').SAName)]",
    "MSILookup": {
      "SQL": "Cluster",
      "UTL": "DefaultKeyVault",
      "FIL": "Cluster",
      "OCR": "Storage",
      "WVD": "WVD"
    },
    "userAssignedIdentities": {
      "Cluster": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiKeyVaultSecretsGet'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperator'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        }
      },
      "Default": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiKeyVaultSecretsGet'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperator'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountFileContributor'))]": {
        }
      },
      "DefaultKeyVault": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiKeyVaultSecretsGetApp'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiAzureServiceBusDataOwner'))]": {
        }
      },
      "WVD": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountFileContributor'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiWVDRegKeyReader'))]": {
        }
      },
      "Storage": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountContributor'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        }
      },
      "None": {
      }
    }
  },
  "resources": [
    // {
    //   "condition": "[equals(variables('DeploymentName'),'SQLServers')]",
    //   "name": "[variables('saWitnessName')]",
    //   "type": "Microsoft.Storage/storageAccounts",
    //   "location": "[resourceGroup().location]",
    //   "apiVersion": "2018-07-01",
    //   "sku": {
    //     "name": "Standard_LRS"
    //   },
    //   "dependsOn": [],
    //   "kind": "StorageV2",
    //   "properties": {
    //     "supportsHttpsTrafficOnly": true,
    //     "encryption": {
    //       "keySource": "Microsoft.Storage",
    //       "services": {
    //         "blob": {
    //           "enabled": true
    //         },
    //         "file": {
    //           "enabled": true
    //         }
    //       }
    //     }
    //   }
    // },
    // {
    //   "condition": "[equals(variables('DeploymentName'),'SQLServers')]",
    //   "name": "[variables('saSQLBackupName')]",
    //   "type": "Microsoft.Storage/storageAccounts",
    //   "location": "[resourceGroup().location]",
    //   "apiVersion": "2018-07-01",
    //   "sku": {
    //     "name": "Premium_LRS"
    //   },
    //   "dependsOn": [],
    //   "kind": "StorageV2",
    //   "properties": {
    //     "supportsHttpsTrafficOnly":true,
    //     "encryption": {
    //       "keySource": "Microsoft.Storage",
    //       "services": {
    //         "blob": {
    //           "enabled": true
    //         },
    //         "file": {
    //           "enabled": true
    //         }
    //       }
    //     }
    //   }
    // },
    {
      "condition": "[not(equals(union(variables('ASNAME'),createArray())[copyIndex()],'usingZones'))]",
      "name": "[concat(variables('Deployment'),'-as',string(union(variables('ASNAME'),createArray())[copyIndex()]))]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-04-30-preview",
      "dependsOn": [
      ],
      "sku": {
        "name": "Aligned"
      },
      "copy": {
        "name": "asLoop",
        "count": "[length(union(variables('ASNAME'),createArray()))]" //Remove duplicates
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 3
      }
    },
    {
      "condition": "[variables('VM')[copyIndex(0)].matchVM]",
      "name": "[concat('dp', variables('Deployment'),'-publicIPDeploy', variables('AppServers')[copyIndex(0)].Name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "dependsOn": [
      ],
      "copy": {
        "name": "publicIPLoop",
        "count": "[length( variables('AppServers') )]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('global')._artifactsLocation, '/', 'templates-nested/PublicIP.json', parameters('global')._artifactsLocationSasToken)]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "NICs": {
            "value": "[variables('AppServers')[copyIndex(0)].NICs]"
          },
          "vm": {
            "value": "[variables('AppServers')[copyIndex(0)]]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "OMSworkspaceID": {
            "value": "[variables('OMSworkspaceID')]"
          }
        }
      }
    },
    {
      "condition": "[variables('VM')[copyIndex(0)].matchVM]",
      "name": "[concat('dp', variables('Deployment'),'-nicDeployLoop', variables('AppServers')[copyIndex(0)].Name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "dependsOn": [
        "[concat('dp', variables('Deployment'), '-publicIPDeploy', variables('AppServers')[copyIndex(0)].Name)]"
      ],
      "copy": {
        "name": "nicLoop",
        "count": "[length( variables('AppServers') )]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('global')._artifactsLocation, '/', 'templates-nested/vmNicLoop.json', parameters('global')._artifactsLocationSasToken)]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "NICs": {
            "value": "[variables('AppServers')[copyIndex(0)].NICs]"
          },
          "vm": {
            "value": "[variables('AppServers')[copyIndex(0)]]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          }
        }
      }
    },
    {
      "condition": "[variables('VM')[copyIndex(0)].matchVM]",
      "name": "[concat('dp', variables('Deployment'),'-diskLookup', variables('AppServers')[copyIndex(0)].Name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "dependsOn": [
      ],
      "copy": {
        "name": "vmdiskLoop",
        "count": "[length( variables('AppServers') )]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('global')._artifactsLocation, '/', 'templates-nested/disks.json', parameters('global')._artifactsLocationSasToken)]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "Name": {
            "value": "[variables('AppServers')[copyIndex(0)].Name]"
          },
          "SOFS": {
            "value": "[if(contains(variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole],'SOFS'),variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole].SOFS,json('{\"1\":1}'))]"
          },
          "DATA": {
            "value": "[if(contains(variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole],'DATA'),variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole].DATA,json('{\"1\":1}'))]"
          },
          "LOGS": {
            "value": "[if(contains(variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole],'LOGS'),variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole].LOGS,json('{\"1\":1}'))]"
          },
          "TEMPDB": {
            "value": "[if(contains(variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole],'TEMPDB'),variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole].TEMPDB,json('{\"1\":1}'))]"
          },
          "BACKUP": {
            "value": "[if(contains(variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole],'BACKUP'),variables('DataDiskInfo')[variables('AppServers')[copyIndex(0)].DDRole].BACKUP,json('{\"1\":1}'))]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          }
        }
      }
    },
    {
      // move to user assigned identity https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/qs-configure-template-windows-vm
      "name": "[concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name)]",
      "condition": "[variables('VM')[copyIndex(0)].matchVM]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2020-12-01",
      "identity": {
        "type": "SystemAssigned, UserAssigned",
        // "userAssignedIdentities": "[if(contains(variables('AppServers')[copyIndex(0)].ASNAME,'CLS'),variables('userAssignedIdentities')['Cluster'],variables('userAssignedIdentities')['Default'])]"
        "userAssignedIdentities": "[if(contains(variables('MSILookup'),variables('AppServers')[copyIndex(0)].ASNAME),variables('userAssignedIdentities')[variables('MSILookup')[variables('AppServers')[copyIndex(0)].ASNAME]],variables('userAssignedIdentities')['Default'])]"

      },
      "tags": {
        "Environment": "[variables('Environment')[parameters('Environment')]]"
      },
      "zones": "[if(contains(variables('AppServers')[copyIndex(0)],'Zone'),array(variables('AppServers')[copyIndex(0)].Zone),json('null'))]",
      "copy": {
        "name": "vmLoop",
        "count": "[length(variables('AppServers'))]"
      },
      "dependsOn": [
        "[concat('dp', variables('Deployment'), '-nicDeployLoop', variables('AppServers')[copyIndex(0)].Name)]",
        "[concat('dp', variables('Deployment'), '-diskLookup', variables('AppServers')[copyIndex(0)].Name)]",
        "asLoop"
      ],
      "plan": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType],'plan'),variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].plan,json('null'))]",
      "properties": {
        "licenseType": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType],'licenseType'),variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].licenseType,json('null'))]",
        // If Zone is specified that use it and ignore the availabilitySet
        "availabilitySet": "[if(contains(variables('AppServers')[copyIndex(0)],'Zone'),json('null'),json( concat('{\"id\":\"',string(resourceid('Microsoft.Compute/availabilitySets',concat(variables('Deployment'),'-as',variables('AppServers')[copyIndex(0)].ASName))),'\"}')))]",
        "hardwareProfile": {
          "vmSize": "[variables('computeSizeLookupOptions')[concat(variables('AppServers')[copyIndex(0)].ASNAME,'-',variables('vmsizelookup')[parameters('Environment')])]]"
        },
        "osProfile": {
          "computerName": "[variables('VM')[copyindex()].vmhostname]",
          "adminUsername": "[if(contains(variables('AppServers')[copyIndex(0)],'AdminUser'),variables('AppServers')[copyIndex(0)].AdminUser,parameters('Global').vmAdminUserName)]",

          "adminPassword": "[parameters('vmAdminPassword')]",

          // customdData downloaded to vm /var/lib/cloud/instance/user-data.txt
          "customData": "[if(contains(variables('AppServers')[copyIndex(0)],'customData'),base64(replace(variables('AppServers')[copyIndex(0)].customData,'{0}',concat(variables('networkId'),'.'))),json('null'))]",
          "secrets": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),variables('secrets'),json('null'))]",
          "windowsConfiguration": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),variables('VM')[CopyIndex(0)].windowsConfiguration,json('null'))]"
        },
        "storageProfile": {
          "imageReference": "[variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].imageReference]",
          "osDisk": {
            "name": "[concat(variables('Deployment'),'-',variables('AppServers')[copyIndex(0)].Name, '-OSDisk')]",
            "caching": "ReadWrite",
            "diskSizeGB": "[variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OSDiskGB]",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('StorageAccountType')]"
            }
          },

          // "dataDisks" : [{"name":"AZE2-ADF-S2-DC01-DATA-DATA00","lun":0,"caching":"ReadOnly","diskSizeGB":32,"createOption":"Empty"}]
          // "dataDisks": "[if(contains(variables('AppServers')[copyIndex(0)],'ddInfo'),variables('AppServers')[copyIndex(0)].ddInfo,json('null'))]"
          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments',concat('dp', variables('Deployment'), '-diskLookup', variables('AppServers')[copyIndex(0)].Name)),'2018-05-01').outputs.DATADisks.value]"
        },
        "networkProfile": {
          "copy": [
            {
              "name": "networkInterfaces",
              "count": "[length(variables('AppServers')[copyIndex(0)].NICs)]",
              "input": {
                // "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('Deployment'),'-',variables('AppServers')[copyIndex(0)].Name,if(contains(variables('AppServers')[copyIndex(0)].NICs[copyIndex('networkInterfaces')],'LB'),'-niclb',if(contains(variables('AppServers')[copyIndex(0)].NICs[copyIndex('networkInterfaces')],'PLB'),'-nicplb',if(contains(variables('AppServers')[copyIndex(0)].NICs[copyIndex('networkInterfaces')],'ISLB'),'-nicislb','-nic'))),copyIndex('networkInterfaces',1)))]",
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('Deployment'),if(contains(variables('AppServers')[copyIndex(0)].NICs[copyIndex('networkInterfaces')],'LB'),'-niclb',if(contains(variables('AppServers')[copyIndex(0)].NICs[copyIndex('networkInterfaces')],'PLB'),'-nicplb',if(contains(variables('AppServers')[copyIndex(0)].NICs[copyIndex('networkInterfaces')],'SLB'),'-nicslb','-nic'))),if(equals(copyIndex('networkInterfaces'),0),'',copyIndex('networkInterfaces',1)),variables('AppServers')[copyIndex(0)].Name))]",

                "properties": {
                  "primary": "[contains(variables('AppServers')[copyIndex(0)].NICs[copyIndex('networkInterfaces')],'Primary')]"
                }
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://', variables('SADiagName'), '.blob.core.windows.net')]"
          }
        }
      },
      "resources": [
        {
          // %windrive%\WindowsAzure\Logs\Plugins\Microsoft.Azure.KeyVault.Edp.KeyVaultForWindows\<version>\akvvm_service_<date>.log
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.CertMgmt,1))]",
          "type": "extensions",
          "name": "KVVMExtensionForWindows",
          "apiVersion": "2019-03-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.KeyVault.Edp",
            "type": "KeyVaultForWindows",
            "typeHandlerVersion": "0.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "secretsManagementSettings": {
                "pollingIntervalInS": 3600,
                "certificateStoreName": "MY",
                "certificateStoreLocation": "LOCAL_MACHINE",
                "observedCertificates": [
                  "[parameters('Global').certificateUrl]"
                ]
              }
            }
          }
        },
        {
          //  https://docs.microsoft.com/en-us/azure/active-directory/devices/howto-vm-sign-in-azure-ad-windows
          //  https://docs.microsoft.com/en-us/azure/virtual-machines/linux/login-using-aad
          // "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.AADLogin,1))]",
          "condition": "[and(
                            variables('VM')[copyIndex(0)].matchVM,
                            and(
                              not(
                                and(contains(variables('AppServers')[copyIndex(0)],'ExcludeAADLogin'),
                                    equals(variables('AppServers')[copyIndex(0)].ExcludeAADLogin,1)
                                )
                              ),
                            equals(variables('VM')[copyIndex(0)].Extensions.AADLogin,1)
                            )
                          )]",
          "name": "AADLogin",
          "type": "extensions",
          "apiVersion": "2019-03-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "publisher": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'Microsoft.Azure.ActiveDirectory','Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'AADLoginForWindows','AADLoginForLinux')]",
            "typeHandlerVersion": "1.0",
            "autoUpgradeMinorVersion": true
          }
        },
        //  currently this installs OpenSSH for Windows 7.7p1 which is too low to support azure ad.
        // {
        //   "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.WindowsOpenSSH,1))]",
        //   "name": "WindowsOpenSSH",
        //   "type": "extensions",
        //   "apiVersion": "2019-03-01",
        //   "location": "[resourceGroup().location]",
        //   "dependsOn": [
        //     "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]"
        //   ],
        //   "properties": {
        //     "publisher": "Microsoft.Azure.OpenSSH",
        //     "type": "WindowsOpenSSH",
        //     "typeHandlerVersion": "1.0",
        //     "autoUpgradeMinorVersion": true
        //   }
        // },
        // {
        //   "condition": "[and(parameters('aadJoin'),parameters('intune'))]",
        //   "name": "AADLoginForWindowsWithIntune",
        //   "type": "extensions",
        //   "apiVersion": "2019-03-01",
        //   "location": "[resourceGroup().location]",
        //   "dependsOn": [
        //     "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]"
        //   ],
        //   "properties": {
        //     "publisher": "Microsoft.Azure.ActiveDirectory",
        //     "type": "AADLoginForWindows",
        //     "typeHandlerVersion": "1.0",
        //     "autoUpgradeMinorVersion": true,
        //     "settings": {
        //       "mdmId": "0000000a-0000-0000-c000-000000000000"
        //     }
        //   }
        // },
        {
          "condition": "[and(
                            variables('VM')[copyIndex(0)].matchVM,
                            and(
                              not(
                                and(contains(variables('AppServers')[copyIndex(0)],'ExcludeAdminCenter'),
                                    equals(variables('AppServers')[copyIndex(0)].ExcludeAdminCenter,1)
                                )
                              ),
                            equals(variables('VM')[copyIndex(0)].Extensions.AdminCenter,1)
                            )
                          )]",
          "name": "AdminCenter",
          "apiVersion": "2019-03-01",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "autoUpgradeMinorVersion": true,
            "publisher": "Microsoft.AdminCenter",
            "type": "AdminCenter",
            "typeHandlerVersion": "0.0",
            "settings": {
              "port": "6516",
              "cspFrameAncestors": [
                "https://portal.azure.com",
                "https://*.hosting.portal.azure.net",
                "https://localhost:1340"
              ],
              "corsOrigins": [
                "https://portal.azure.com",
                "https://waconazure.com"
              ]
            }
          }
        },
        {
          // Domain Join Options https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,and(not(and(contains(variables('AppServers')[copyIndex(0)],'ExcludeDomainJoin'),equals(variables('AppServers')[copyIndex(0)].ExcludeDomainJoin,1))),equals(variables('VM')[copyIndex(0)].Extensions.DomainJoin,1)))]",
          "apiVersion": "2019-03-01",
          "type": "extensions",
          "name": "joindomain",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "JsonADDomainExtension",
            "typeHandlerVersion": "1.3",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "Name": "[parameters('Global').ADDomainName]",
              "OUPath": "[if(contains(variables('AppServers')[copyIndex(0)],'OUPath'),variables('AppServers')[copyIndex(0)].OUPath,'')]",
              "User": "[concat(parameters('Global').vmAdminUserName,'@',parameters('Global').ADDomainName)]",
              "Restart": "true",
              "Options": 3
            },
            "protectedSettings": {
              "Password": "[parameters('vmAdminPassword')]"
            }
          }
        },
        //  Don't need these, now using User Assigned Identity
        // {
        //   //"condition": "[equals(parameters('Extensions').MSI,1)]",
        //   "condition": "[equals(variables('VM')[copyIndex(0)].Extensions.MSI,1)]",
        //   "type": "extensions",
        //   "name": "ManagedIdentityExtension",
        //   "apiVersion": "2019-03-01",
        //   "location": "[resourceGroup().location]",
        //   "dependsOn": [
        //     "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]"
        //   ],
        //   "properties": {
        //     "publisher": "Microsoft.ManagedIdentity",
        //     "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'ManagedIdentityExtensionForWindows','ManagedIdentityExtensionForLinux')]",
        //     "typeHandlerVersion": "1.0",
        //     "autoUpgradeMinorVersion": true,
        //     "settings": {
        //       "port": 50342
        //     },
        //     "protectedSettings": {}
        //   }
        // },
        // {
        //   // Used for the Cloud Witness Storage account
        //   //"condition": "[and(equals(variables('AppServers')[copyIndex(0)].Role,'SQL'),equals(variables('VM')[copyIndex(0)].Extensions.MSI,1))]",
        //   //"condition": "[and(                                                         equals(parameters('Extensions').DSC,1),equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'))]",
        //   // workaround while the union bug is open
        //   "condition": "[and(and(or(equals(variables('AppServers')[copyIndex(0)].Role,'DFS'),or( equals(variables('AppServers')[copyIndex(0)].Role,'FIL'),equals(variables('AppServers')[copyIndex(0)].Role,'SQL'))),equals(parameters('Extensions').DSC,1)),equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'))]",
        //   "apiVersion": "2019-05-01",
        //   "type": "Microsoft.Resources/deployments",
        //   "name": "[concat('nested-roleAssignmentsLocal',variables('AppServers')[copyIndex(0)].Name)]",
        //   "dependsOn": [
        //     "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]",
        //     "[concat('Microsoft.Compute/virtualMachines/',variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name,'/extensions/ManagedIdentityExtension')]"
        //   ],
        //   "properties": {
        //     "mode": "Incremental",
        //     "template": {
        //       "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
        //       "contentVersion": "1.0.0.0",
        //       "parameters": {},
        //       "variables": {},
        //       "resources": [
        //         {
        //           "type": "Microsoft.Authorization/roleAssignments",
        //           // Unique guid for the role assignment type, the resource group where it's assigned and the unique guid of the vm principalid
        //           "name": "[guid('81a9662b-bebf-436f-a333-f67b29880f12',resourceGroup().name,reference(resourceid('Microsoft.Compute/virtualMachines',concat(variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name)),'2017-12-01','Full').identity.principalId )]",
        //           "apiVersion": "2018-01-01-preview",
        //           "properties": {
        //             "roleDefinitionId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12')]",
        //             "principalId": "[reference(resourceid('Microsoft.Compute/virtualMachines',concat(variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name)),'2017-12-01','Full').identity.principalId]",
        //             "scope": "[resourceGroup().id]"
        //           }
        //         }
        //       ]
        //     },
        //     "parameters": {}
        //   }
        // },
        // {
        //   // Used for VM to read the keys from the Global Storage account
        //   "condition": "[equals(variables('VM')[copyIndex(0)].Extensions.MSI,1)]",
        //   "apiVersion": "2019-05-01",
        //   "type": "Microsoft.Resources/deployments",
        //   "name": "[concat('nested-roleAssignmentsGlobal',variables('AppServers')[copyIndex(0)].Name)]",
        //   "resourceGroup": "[parameters('Global').HubRGName]",
        //   "subscriptionId": "[variables('SubscriptionID')]",
        //   "dependsOn": [
        //     "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]",
        //     "[concat('Microsoft.Compute/virtualMachines/',variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name,'/extensions/ManagedIdentityExtension')]"
        //   ],
        //   "properties": {
        //     "mode": "Incremental",
        //     "template": {
        //       "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
        //       "contentVersion": "1.0.0.0",
        //       "parameters": {},
        //       "variables": {},
        //       "resources": [
        //         {
        //           "type": "Microsoft.Authorization/roleAssignments",
        //           // Unique guid for the role assignment type, the resource group where it's assigned and the unique guid of the vm principalid
        //           "name": "[guid('81a9662b-bebf-436f-a333-f67b29880f12',parameters('Global').HubRGName,reference(resourceid('Microsoft.Compute/virtualMachines',concat(variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name)),'2017-12-01','Full').identity.principalId )]",
        //           "apiVersion": "2018-01-01-preview",
        //           "properties": {
        //             "roleDefinitionId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12')]",
        //             "principalId": "[reference(resourceid('Microsoft.Compute/virtualMachines',concat(variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name)),'2017-12-01','Full').identity.principalId]",
        //             "scope": "[concat(Subscription().id,'/resourceGroups/',parameters('Global').HubRGName)]"
        //           }
        //         }
        //       ]
        //     },
        //     "parameters": {}
        //   }
        // },
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.MonitoringAgent,1))]",
          "type": "extensions",
          "name": "MonitoringAgent",
          "apiVersion": "2020-12-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "publisher": "Microsoft.EnterpriseCloud.Monitoring",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'MicrosoftMonitoringAgent','OmsAgentForLinux')]",
            "typeHandlerVersion": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'1.0','1.4')]",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "workspaceId": "[reference(variables('OMSworkspaceID'), '2017-04-26-preview').CustomerId]"
            },
            "protectedSettings": {
              "workspaceKey": "[listKeys(variables('OMSworkspaceID'), '2015-11-01-preview').primarySharedKey]"
            }
          }
        },
        {
          "condition": "[
            and(
              variables('VM')[copyIndex(0)].matchVM,
              and(
                  equals(variables('VM')[copyIndex(0)].extensions.DSC,1),
                  equals(variables('AppServers')[copyIndex(0)].Role,'Pull')
                )
              )
            ]",
          "name": "Microsoft.Powershell.DSC.Pull",
          "type": "extensions",
          "apiVersion": "2021-03-01",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]",
            "[concat('Microsoft.Compute/virtualMachines/',variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name,'/extensions/joindomain')]"
          ],
          "location": "[resourceGroup().location]",
          "tags": {
            "displayName": "Powershell.DSC.Pull"
          },
          "properties": {
            "publisher": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'Microsoft.Powershell','Microsoft.OSTCExtensions')]",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'DSC','DSCForLinux')]",
            "typeHandlerVersion": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'2.77','2.0')]",
            "autoUpgradeMinorVersion": true,
            "protectedSettings": {
              "Items": {
                "registrationKeyPrivate": "[listKeys(resourceId(variables('AAResourceGroup'),'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].value]"
              }
            },
            "settings": {
              "advancedOptions": {
                "forcePullAndApply": true
              },
              "Properties": [
                {
                  "Name": "RegistrationKey",
                  "Value": {
                    "UserName": "PLACEHOLDER_DONOTUSE",
                    "Password": "PrivateSettingsRef:registrationKeyPrivate"
                  },
                  "TypeName": "System.Management.Automation.PSCredential"
                },
                {
                  "Name": "RegistrationUrl",
                  "Value": "[reference(resourceId(variables('AAResourceGroup'),'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "NodeConfigurationName",
                  "Value": "[concat(
                                    if(contains( variables('DSCConfigLookup'),variables('DeploymentName')) ,
                                        variables('DSCConfigLookup')[variables('DeploymentName')],
                                        'AppServers'),
                                    '.',parameters('Global').OrgName,'_',parameters('Global').Appname,'_',
                                    variables('AppServers')[copyIndex(0)].ASName,'_',parameters('Environment'),parameters('DeploymentID'))]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "ConfigurationMode",
                  "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "RebootNodeIfNeeded",
                  "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                  "TypeName": "System.Boolean"
                },
                {
                  "Name": "ConfigurationModeFrequencyMins",
                  "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                  "TypeName": "System.Int32"
                },
                {
                  "Name": "RefreshFrequencyMins",
                  "Value": 30,
                  "TypeName": "System.Int32"
                },
                {
                  "Name": "ActionAfterReboot",
                  "Value": "ContinueConfiguration",
                  "TypeName": "System.String"
                },
                {
                  "Name": "AllowModuleOverwrite",
                  "Value": true,
                  "TypeName": "System.Boolean"
                }
              ]
            }
          }
        },
        {
          // "condition": "[and(equals(variables('VM')[copyIndex(0)].Extensions.DSC,1),equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'))]",
          "condition": "[
            and(
              variables('VM')[copyIndex(0)].matchVM,
              and(
                  equals(variables('VM')[copyIndex(0)].extensions.DSC,1),
                  not(equals(variables('AppServers')[copyIndex(0)].Role,'Pull'))
                )
              )
            ]",
          "type": "extensions",
          "name": "Microsoft.Powershell.DSC",
          "location": "[resourceGroup().location]",
          "apiVersion": "2021-03-01",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(variables('Deployment'),'-vm', variables('AppServers')[copyIndex(0)].Name))]",
            // "[concat('Microsoft.Resources/deployments/','nested-roleAssignmentsGlobal',variables('AppServers')[copyIndex(0)].Name)]",
            // "[concat('Microsoft.Resources/deployments/','nested-roleAssignmentsLocal',variables('AppServers')[copyIndex(0)].Name)]",
            // "[concat('Microsoft.Storage/storageAccounts/',variables('saWitnessName'))]",
            // "[concat('Microsoft.Compute/virtualMachines/',variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name,'/extensions/ManagedIdentityExtension')]",
            "[concat('Microsoft.Compute/virtualMachines/',variables('Deployment'),'-vm',variables('AppServers')[copyIndex(0)].Name,'/extensions/joindomain')]"
          ],
          "properties": {
            "publisher": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'Microsoft.Powershell','Microsoft.OSTCExtensions')]",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'DSC','DSCForLinux')]",
            "typeHandlerVersion": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'2.24','2.0')]",
            "autoUpgradeMinorVersion": true,
            "forceUpdateTag": "[parameters('deploymentTime')]",
            "settings": {
              "wmfVersion": "latest",
              "configuration": {
                "url": "[concat(parameters('global')._artifactsLocation, '/ext-DSC/DSC-',
                              if(contains(variables('AppServers')[copyIndex(0)],'DSConfig'),
                                  variables('AppServers')[copyIndex(0)].DSConfig,
                                    if(
                                      contains(variables('DSCConfigLookup'),variables('DeploymentName')),
                                                variables('DSCConfigLookup')[variables('DeploymentName')],
                                                  variables('DeploymentName')
                                      )),
                                      '.zip')]",
                "script": "[concat('DSC-',if(contains(variables('AppServers')[copyIndex(0)],'DSConfig'),
                                            variables('AppServers')[copyIndex(0)].DSConfig,
                                              if(
                                                contains(variables('DSCConfigLookup'),variables('DeploymentName')),
                                                          variables('DSCConfigLookup')[variables('DeploymentName')],
                                                            variables('DeploymentName')
                                                )),'.ps1')]",
                "function": "[if(contains(variables('AppServers')[copyIndex(0)],'DSConfig'),
                                variables('AppServers')[copyIndex(0)].DSConfig,
                                  if(
                                    contains(variables('DSCConfigLookup'),variables('DeploymentName')),
                                              variables('DSCConfigLookup')[variables('DeploymentName')],
                                                variables('DeploymentName')
                                    ))]"
              },
              "configurationArguments": {
                "DomainName": "[parameters('Global').ADDomainName]",
                "Thumbprint": "[parameters('Global').certificateThumbprint]",
                "storageAccountId": "[variables('saaccountidglobalsource')]",
                "deployment": "[replace(variables('Deployment'),'-','')]",
                "networkid": "[concat(variables('networkId'),'.')]",
                "appInfo": "[if(contains(variables('AppServers')[copyIndex(0)],'AppInfo'),string(variables('AppServers')[copyIndex(0)].AppInfo),'')]",
                "DataDiskInfo": "[string(variables('VM')[copyIndex(0)].DataDisk)]",
                "clientIDLocal": "[if(equals(concat(parameters('Environment'),parameters('DeploymentID')),'G0') ,'',reference(concat(subscription().Id,'/resourceGroups/',variables('RGName'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('Deployment'),'-uaiStorageAccountOperator'),'2018-11-30').ClientId)]",
                "clientIDGlobal": "[if(equals(concat(parameters('Environment'),parameters('DeploymentID')),'G0') ,'',reference(concat(subscription().Id,'/resourceGroups/',variables('RGName'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('Deployment'),'-uaiStorageAccountFileContributor'),'2018-11-30').ClientId)]"
              },
              "configurationData": {
                "url": "[concat(parameters('global')._artifactsLocation, '/ext-CD/',variables('AppServers')[copyIndex(0)].Role,'-ConfigurationData.psd1')]"
              }
            },
            "protectedSettings": {
              "configurationArguments": {
                "AdminCreds": {
                  "UserName": "[parameters('Global').vmAdminUserName]",
                  "Password": "[parameters('vmAdminPassword')]"
                },
                "sshPublic": {
                  "UserName": "ssh",
                  "Password": "[parameters('sshPublic')]"
                },
                "devOpsPat": {
                  "UserName": "pat",
                  "Password": "[parameters('devOpsPat')]"
                }
              },
              "configurationUrlSasToken": "[parameters('global')._artifactsLocationSasToken]",
              "configurationDataUrlSasToken": "[parameters('global')._artifactsLocationSasToken]"
            }
          }
        },
        //  TODO replace Azure DevOps Agents with Self hosted Runners for GitHub Actions
        // {
        //   "condition": "[and(variables('VM')[copyIndex(0)].matchVM,and(and(contains(variables('AppServers')[copyIndex(0)],'IncludeDevOpsAgent'),equals(variables('AppServers')[copyIndex(0)].IncludeDevOpsAgent,1)),equals(variables('AppServers')[copyIndex(0)].IncludeDevOpsAgent,1)))]",
        //   "name": "DevOpsAgent",
        //   "type": "extensions",
        //   "location": "[resourceGroup().location]",
        //   "dependsOn": [
        //     "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
        //   ],
        //   "tags": {
        //     "displayName": "AzDevOpsAgent"
        //   },
        //   "apiVersion": "2019-03-01",
        //   "properties": {
        //     "publisher": "Microsoft.VisualStudio.Services",
        //     "type": "TeamServicesAgent",
        //     "typeHandlerVersion": "1.0",
        //     "autoUpgradeMinorVersion": true,
        //     "settings": {
        //       "VSTSAccountName": "[parameters('Global').AZDevOpsOrg]",
        //       "TeamProject": "[parameters('Global').GitHubProject]",
        //       "DeploymentGroup": "[parameters('Global').GitHubProject]",
        //       "AgentName": "[replace(concat(variables('Deployment'), variables('VM')[copyIndex(0)].Name),'-','')]",
        //       "Tags": "[variables('Deployment')]"
        //     },
        //     "protectedSettings": {
        //       "PATToken": "[parameters('sshPublic')]"
        //     }
        //   }
        // },
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.IaaSDiagnostics,1))]",
          //"condition": "[equals(parameters('Extensions').IaaSDiagnostics,1)]",
          "type": "extensions",
          "name": "VMDiagnostics",
          "apiVersion": "2020-12-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'IaaSDiagnostics','LinuxDiagnostic')]",
            "typeHandlerVersion": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'1.9','3.0')]",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "WadCfg": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),variables('WadCfg'),json('null'))]",
              "ladCfg": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),json('null'),variables('ladCfg'))]",
              "StorageAccount": "[variables('saaccountiddiag')]",
              "StorageType": "TableAndBlob"
            },
            "protectedSettings": {
              "storageAccountName": "[variables('saaccountiddiag')]",
              "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
              "storageAccountEndPoint": "https://core.windows.net/"
            }
          }
        },
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.DependencyAgent,1))]",
          "type": "extensions",
          "name": "DependencyAgent",
          "apiVersion": "2020-12-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'DependencyAgentWindows','DependencyAgentLinux')]",
            "typeHandlerVersion": "9.5",
            "autoUpgradeMinorVersion": true
          }
        },
        // https://docs.microsoft.com/en-us/azure/azure-monitor/insights/vminsights-health-enable?tabs=powershell
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.AzureMonitorAgent,1))]",
          "name": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'AzureMonitorWindowsAgent','AzureMonitorLinuxAgent')]",
          "type": "extensions",
          "apiVersion": "2020-12-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "autoUpgradeMinorVersion": true,
            "publisher": "Microsoft.Azure.Monitor",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'AzureMonitorWindowsAgent','AzureMonitorLinuxAgent')]",
            "typeHandlerVersion": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'1.0','1.5')]"
          }
        },
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.GuestHealthAgent,1))]",
          "name": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'GuestHealthWindowsAgent','GuestHealthLinuxAgent')]",
          "type": "extensions",
          "apiVersion": "2020-12-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "autoUpgradeMinorVersion": true,
            "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'GuestHealthWindowsAgent','GuestHealthLinuxAgent')]",
            "typeHandlerVersion": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'1.0','1.0')]"
          }
        },
        {
          "condition": "[variables('VM')[copyIndex(0)].matchVM]",
          "type": "providers/dataCollectionRuleAssociations",
          "name": "[concat('Microsoft.Insights/',replace(concat(variables('Deployment'),'VMInsights'),'-',''))]",
          "apiVersion": "2019-11-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "description": "Association of data collection rule for VM Insights Health.",
            "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules',replace(concat(variables('Deployment'),'VMInsights'),'-',''))]"
          }
        },
        // https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/chef
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.chefClient,1))]",
          "type": "extensions",
          "name": "chefClient",
          "apiVersion": "2019-03-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "publisher": "Chef.Bootstrap.WindowsAzure",
            "type": "[if(equals(variables('OSType')[variables('AppServers')[copyIndex(0)].OSType].OS,'Windows'),'ChefClient','LinuxChefClient')]",
            "typeHandlerVersion": "1210.12",
            "settings": {
              "bootstrap_options": {
                "chef_server_url": "[parameters('Global').chef_server_url]",
                "validation_client_name": "[parameters('Global').chef_validation_client_name]"
              },
              "runlist": "recipe[mycookbook::default]"
            },
            "protectedSettings": {
              "validation_key": "[parameters('Global').chef_validation_key]"
            }
          }
        },
        // https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-ps-sql-keyvault/
        // https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sql-server-agent-extension/
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,and(equals(variables('AppServers')[copyIndex(0)].Role,'SQL'),equals(variables('VM')[copyIndex(0)].Extensions.SqlIaasExtension,1)))]",
          "type": "extensions",
          "name": "SqlIaasExtension",
          "apiVersion": "2019-03-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]",
            "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name),'Microsoft.Powershell.DSC')]"
          ],
          "properties": {
            "type": "SqlIaaSAgent",
            "publisher": "Microsoft.SqlServer.Management",
            "typeHandlerVersion": "1.2",
            "autoUpgradeMinorVersion": "true",
            "settings": {
              "AutoTelemetrySettings": {
                "Region": "[resourceGroup().location]"
              },
              "KeyVaultCredentialSettings": {
                "Enable": true,
                "CredentialName": "[parameters('Global').sqlCredentialName]"
              }
              // "AutoBackupSettings": {
              //   "Enable": true,
              //   "RetentionPeriod": "[parameters('Global').sqlAutobackupRetentionPeriod]",
              //   "EnableEncryption": true
              // }
            },
            "protectedSettings": {
              "PrivateKeyVaultCredentialSettings": {
                "AzureKeyVaultUrl": "[variables('KVUrl')]",
                "ServicePrincipalName": "[parameters('Global').sqlBackupservicePrincipalName]",
                "ServicePrincipalSecret": "[parameters('Global').sqlBackupservicePrincipalSecret]",
                "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(variables('AppServers')[copyIndex(0)].Role,'SQL'),variables('saSQLBackupName'),variables('SADiagName'))),'2015-06-15').primaryEndpoints['blob']]",
                "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(variables('AppServers')[copyIndex(0)].Role,'SQL'),variables('saSQLBackupName'),variables('SADiagName'))), '2016-01-01').keys[0].value]",
                "Password": "[parameters('vmAdminPassword')]"
              }
            }
          }
        },
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,and(equals(variables('AppServers')[copyIndex(0)].Role,'SQL'),equals(variables('VM')[copyIndex(0)].Extensions.BackupWindowsWorkloadSQL,1)))]",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "name": "AzureBackupWindowsWorkload",
          "apiVersion": "2019-03-01",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "autoUpgradeMinorVersion": true,
            "settings": {
              "locale": "en-us",
              "vmType": "microsoft.compute/virtualmachines"
            },
            "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
            "type": "AzureBackupWindowsWorkload",
            "typeHandlerVersion": "1.1"
          }
        },
        {
          "condition": "[and(variables('VM')[copyIndex(0)].matchVM,equals(variables('VM')[copyIndex(0)].Extensions.Antimalware,1))]",
          "type": "extensions",
          "name": "IaaSAntimalware",
          "apiVersion": "2019-03-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'), '-vm', variables('AppServers')[copyIndex(0)].Name))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Security",
            "type": "IaaSAntimalware",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "Monitoring": "ON",
              "StorageAccountName": "[variables('sadiagname')]",
              "AntimalwareEnabled": true,
              "RealtimeProtectionEnabled": "true",
              "ScheduledScanSettings": {
                "isEnabled": "true",
                "day": "1",
                "time": "720",
                "scanType": "Full"
              },
              "Exclusions": {
                "Extensions": "",
                "Paths": "",
                "Processes": ""
              }
            },
            "protectedSettings": null
          }
        }
      ]
    }
  ],
  "outputs": {
    "foo7": {
      "type": "string",
      "value": "[subscription().subscriptionId]"
    },
    "foo1": {
      "type": "object",
      "value": "[subscription()]"
    },
    "foo2": {
      "type": "string",
      "value": "[subscription().Id]"
    },
    "foo3": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "foo4": {
      "type": "string",
      "value": "[resourceGroup().id]"
    },
    "foo6": {
      "type": "array",
      "value": "[variables('VM')]"
    },
    "Disks": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Resources/deployments',concat('dp', variables('Deployment'), '-diskLookup', variables('AppServers')[0].Name)),'2018-05-01').outputs.dataDisks]"
    }
  }
}
