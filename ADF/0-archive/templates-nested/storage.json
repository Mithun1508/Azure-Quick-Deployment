{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Deployment": {
      "type": "string"
    },
    "DeploymentURI": {
      "type": "string"
    },
    "DeploymentID": {
      "type": "string"
    },
    "Environment": {
      "type": "string"
    },
    "storageInfo": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "Stage": {
      "type": "object"
    },
    "OMSworkspaceID": {
      "type": "string"
    },
    "now": {
      "type": "string",
      "defaultValue": "[utcNow('F')]"
    }
  },
  "variables": {

    "hubRG": "[parameters('Global').hubRGName]",
    //  Only needed this to allow private storage on deployment account, however ARM cannot access it, 
    //  so there is no reason to use this at the moment.
    // "copy": [
    //   {
    //     "name": "ipRulesAllow",
    //     "count": "[length(parameters('Global').PublicIPAddressforRemoteAccess)]",
    //     "input": {
    //       //  Ip rules must be single /32 ip address or else larger than /30, this is adjusted for /32
    //       "value": "[first(split(parameters('Global').PublicIPAddressforRemoteAccess[copyIndex('ipRulesAllow')],'/'))]",
    //       "action": "Allow"
    //     }
    //   }
    // ],
    "storageLoggingAbstractions": [
      "blobServices",
      "fileServices",
      "queueServices",
      "tableService"
    ],
    "azureFilesIdentityBasedAuthentication": {
      "directoryServiceOptions": "AD",
      "activeDirectoryProperties": {
        "domainName": "[parameters('Global').DomainName]",
        "netBiosDomainName": "[first(split(parameters('Global').DomainName,'.'))]",
        "forestName": "[parameters('Global').DomainName]",
        "domainGuid": "99cbe596-b191-4853-aca3-4e19d44f67e0",
        "domainSid": "S-1-5-21-4089952384-727918856-4151886579",
        "azureStorageSid": "string"
      }
    }
  },
  "resources": [
    {
      // Deploy the storage account for the Cloud Witness [File/SQL clusters]
      // AZE2-D02-NTE aze2d02ntesa dis01
      "name": "[toLower(concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix))]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2020-08-01-preview",
      "sku": {
        "name": "[parameters('storageInfo').skuName]"
      },
      "dependsOn": [
      ],
      "kind": "StorageV2",
      "properties": {
        "allowBlobPublicAccess": false,
        "supportsBlobContainerRetention": true,
        "azureFilesIdentityBasedAuthentication": "[if(and(contains(parameters('storageInfo'),'ADDS'),equals(parameters('storageInfo').ADDS,1)),variables('azureFilesIdentityBasedAuthentication'),json('null'))]",
        "largeFileSharesState": "[if(contains(parameters('storageInfo'),'largeFileSharesState'),parameters('storageInfo').largeFileSharesState,json('null'))]",
        "networkAcls": {
          "bypass": "Logging, Metrics, AzureServices",
          "defaultAction": "[if(contains(parameters('storageInfo'),'allNetworks'),parameters('storageInfo').allNetworks,'Allow')]"
          //  Only needed this to allow private storage on deployment account, however ARM cannot access it, 
          //  so there is no reason to use this at the moment.
          // "ipRules": "[if(and(
          //                     contains(parameters('storageInfo'),'addRemoteManagementIPs'),
          //                     equals(parameters('storageInfo').addRemoteManagementIPs,1)
          //                     ),
          //                 variables('ipRulesAllow'),
          //                 json('null')
          //               )]"
          // "virtualNetworkRules": [
          // ]
        },
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          }
        }
      },
      "resources": [
        {
          "name": "default",
          "type": "blobServices",
          "apiVersion": "2020-08-01-preview",
          "dependsOn": [
            "[concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix)]"
          ],
          "properties": {
            "isVersioningEnabled": "[if(contains(parameters('storageInfo'),'blobVersioning'),parameters('storageInfo').blobVersioning,bool('false'))]",
            "changeFeed": {
              "enabled": "[if(contains(parameters('storageInfo'),'changeFeed'),parameters('storageInfo').changeFeed,bool('false'))]"
            },
            "deleteRetentionPolicy": "[if(contains(parameters('storageInfo'),'softDeletePolicy'),parameters('storageInfo').softDeletePolicy,json('null'))]"
          }
        },
        {
          "name": "Microsoft.Insights/service",
          "type": "providers/diagnosticSettings",
          "dependsOn": [
            "[concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix)]"
          ],
          "apiVersion": "2017-05-01-preview",
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "metrics": [
              {
                "category": "Capacity",
                "enabled": false,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "Transaction",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        },
        {
          "name": "default/Microsoft.Insights/service",
          "type": "blobServices/providers/diagnosticSettings",
          "location": "[resourceGroup().location]",
          "apiVersion": "2017-05-01-preview",
          "dependsOn": [
            "[concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix)]"
          ],
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "metrics": [
              {
                "category": "Capacity",
                "enabled": false,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "Transaction",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ],
            "logs": [
              {
                "category": "StorageRead",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.r),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "StorageWrite",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.w),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "StorageDelete",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.d),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        },
        {
          "name": "default/Microsoft.Insights/service",
          "type": "fileServices/providers/diagnosticSettings",
          "location": "[resourceGroup().location]",
          "apiVersion": "2017-05-01-preview",
          "dependsOn": [
            "[concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix)]"
          ],
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "metrics": [
              {
                "category": "Capacity",
                "enabled": false,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "Transaction",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ],
            "logs": [
              {
                "category": "StorageRead",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.r),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "StorageWrite",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.w),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "StorageDelete",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.d),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        },
        {
          "name": "default/Microsoft.Insights/service",
          "type": "queueServices/providers/diagnosticSettings",
          "location": "[resourceGroup().location]",
          "apiVersion": "2017-05-01-preview",
          "dependsOn": [
            "[concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix)]"
          ],
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "metrics": [
              {
                "category": "Capacity",
                "enabled": false,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "Transaction",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ],
            "logs": [
              {
                "category": "StorageRead",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.r),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "StorageWrite",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.w),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "StorageDelete",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.d),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        },
        {
          "name": "default/Microsoft.Insights/service",
          "type": "tableServices/providers/diagnosticSettings",
          "location": "[resourceGroup().location]",
          "apiVersion": "2017-05-01-preview",
          "dependsOn": [
            "[concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix)]"
          ],
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "metrics": [
              {
                "category": "Capacity",
                "enabled": false,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "Transaction",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ],
            "logs": [
              {
                "category": "StorageRead",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.r),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "StorageWrite",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.w),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              },
              {
                "category": "StorageDelete",
                "enabled": "[if(contains(parameters('storageInfo'),'logging'),bool(parameters('storageInfo').logging.d),bool('false'))]",
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        }
      ]
    },
    {
      "condition": "[contains(parameters('storageInfo'),'fileShares')]",
      "name": "[toLower(concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').namesuffix,'/default/',if(contains(parameters('storageInfo'),'fileShares'),parameters('storageInfo').fileShares[copyindex(0)].name,'NA')))]",
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2019-04-01",
      "dependsOn":[
        "[toLower(concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix))]"
      ],
      "copy": {
        "name": "StorageFileShare",
        "count": "[if(contains(parameters('storageInfo'),'fileShares'),length(parameters('storageInfo').fileShares),0)]"
      },
      "properties": {
        "shareQuota": "[parameters('storageInfo').fileShares[copyindex(0)].quota]",
        "metadata": {
        }
      }
    },
    {
      // Call the nested deployment for the Private Link
      "condition": "[contains(parameters('storageInfo'),'privatelinkinfo')]",
      "name": "[concat('dp', parameters('Deployment'), '-privatelinkloopSA', parameters('storageInfo').nameSuffix)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-01-01",
      "dependsOn": [
        "[toLower(concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('global')._artifactsLocation, '/', 'templates-nested/vNetPrivateLink.json', parameters('global')._artifactsLocationSasToken)]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "Deployment": {
            "value": "[parameters('Deployment')]"
          },
          "PrivateLinkInfo": {
            "value": "[parameters('storageInfo').privateLinkInfo]"
          },
          "providerType": {
            "value": "Microsoft.Storage/storageAccounts"
          },
          "resourceName": {
            "value": "[toLower(concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix))]"
          }
        }
      }
    },
    {
      // Call the nested deployment for the Private Link DNS registration
      "condition": "[contains(parameters('storageInfo'),'privatelinkinfo')]",
      "name": "[concat('dp', parameters('Deployment'), '-registerPrivateDNS', parameters('storageInfo').nameSuffix)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('hubRG')]",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "[concat('dp', parameters('Deployment'), '-privatelinkloopSA', parameters('storageInfo').nameSuffix)]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('global')._artifactsLocation, '/', 'templates-nested/registerPrivateLinkDNS.json', parameters('global')._artifactsLocationSasToken)]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "PrivateLinkInfo": {
            "value": "[parameters('storageInfo').privateLinkInfo]"
          },
          "providerURL": {
            "value": ".core.windows.net/"
          },
          "resourceName": {
            "value": "[toLower(concat(parameters('DeploymentURI'),'sa',parameters('storageInfo').nameSuffix))]"
          },
          "Nics": {
            "value": "[if(contains(parameters('storageInfo'),'privatelinkinfo'),reference(resourceId('Microsoft.Resources/deployments',concat('dp', parameters('Deployment'), '-privatelinkloopSA', parameters('storageInfo').nameSuffix)),'2018-05-01').outputs.NICID.value,'')]"
          }
        }
      }
    }
  ]
}