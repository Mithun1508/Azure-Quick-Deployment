{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Deployment": {
      "type": "string",
      "defaultValue": "ACI-Test-01"
    },
    "now": {
      "type": "string",
      "defaultValue": "[utcNow('F')]"
    }
  },
  "variables": {
  },
  "resources": [
    {
      "name": "[concat(concat(parameters('Deployment'),'-uaiNetworkContributor'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]"
    },
    {
      "name": "DeploymentScript1",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(parameters('Deployment'),'-uaiNetworkContributor'))]": {}
        }
      },
      "dependsOn": [
        "[concat(concat(parameters('Deployment'),'-uaiNetworkContributor'))]"
      ],
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "properties": {
        "azPowerShellVersion": "5.4",
        "arguments": "[format(' -ResourceGroupName {0}', resourceGroup().name)]",
        "scriptContent": "
                    param (
                        [string]$ResourceGroupName
                    )
                    
                    try
                    {
                        Write-Output \"`nhostname is: \"
                        hostname
                        Write-Output \"`nUTC is: \"
                        Get-Date
                        Write-Output \"`nResourceGroup is: \"
                        $ResourceGroupName
                        $c = Get-AzContext -ErrorAction stop
                        if ($c)
                        {
                            Write-Output \"`nContext is: \"
                            $c | select Account,Subscription,Tenant,Environment | fl | out-string
                        }
                        else 
                        {
                            throw 'Cannot get a context'
                        }
                    }
                    catch
                    {
                        Write-Warning $_
                        Write-Warning $_.exception
                    }
                ",
        "forceUpdateTag": "[parameters('now')]",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "timeout": "PT3M"
      }
    }
  ],
  "outputs": {
  }
}