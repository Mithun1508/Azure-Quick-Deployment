{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Deployment": {
      "type": "string"
    },
    "DeploymentID": {
      "type": "string"
    },
    "Environment": {
      "type": "string"
    },
    "frontDoorInfo": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "Stage": {
      "type": "object"
    },
    "OMSworkspaceID": {
      "type": "string"
    },
    "now": {
      "type": "string",
      "defaultValue": "[utcNow('F')]"
    }
  },
  "variables": {


    "DefaultFrontEnd": [
      {
        "name": "[concat('default',parameters('frontDoorInfo').name,'-azurefd-net')]",
        "properties": {
          "hostName": "[toLower(concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name,'.azurefd.net'))]",
          "sessionAffinityEnabledState": "Disabled",
          "sessionAffinityTtlSeconds": 0,
          "customHttpsConfiguration": null
          // "webApplicationFirewallPolicyLink": {
          //   "id": "string"
          // }
        }
      }
    ],

    "copy": [
      {
        "name": "frontendEndpoints",
        "count": "[length(parameters('frontDoorInfo').services)]",
        "input": {
          "name": "[concat(parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].name)]",
          "properties": {
            "hostName": "[toLower(concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name,
                                        if(
                                            equals(parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].Name,'Default'),
                                              '.azurefd.net',
                                              concat('-',parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].Name,'.',parameters('Global').DomainNameExt)
                                          )
                                        ))]",
            "sessionAffinityEnabledState": "[parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].sessionAffinityEnabledState]",
            "sessionAffinityTtlSeconds": 0
            // "customHttpsConfiguration": null
            // "webApplicationFirewallPolicyLink": {
            //   "id": "string"
            // }
          }
        }
      },
      {
        "name": "healthProbeSettings",
        "count": "[length(parameters('frontDoorInfo').probes)]",
        "input": {
          "name": "[parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].name]",
          "properties": {
            "path": "[parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].ProbePath]",
            "protocol": "Https",
            "intervalInSeconds": 30,
            "healthProbeMethod": "[if(
                                      contains(parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')],'probeMethod'),
                                      parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].probeMethod,
                                      'Head')]",
            "enabledState": "Enabled"
          }
        }
      },
      {
        "name": "loadBalancingSettings",
        "count": "[length(parameters('frontDoorInfo').LBSettings)]",
        "input": {
          "name": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].name]",
          "properties": {
            "sampleSize": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].sampleSize]",
            "successfulSamplesRequired": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].successfulSamplesRequired]",
            "additionalLatencyMilliseconds": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].additionalLatencyMilliseconds]"
          }
        }
      },
      {
        "name": "routingRules",
        "count": "[length(parameters('frontDoorInfo').services)]",
        "input": {
          "name": "[parameters('frontDoorInfo').services[copyIndex('routingRules')].Name]",
          "properties": {
            "frontendEndpoints": [
              {
                "id": "[resourceId('Microsoft.Network/frontdoors/frontendEndpoints',
                                      concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').Name),
                                              parameters('frontDoorInfo').services[copyIndex('routingRules')].Name)]"
              }
            ],
            "acceptedProtocols": [
              "Http",
              "Https"
            ],
            "patternsToMatch": "[parameters('frontDoorInfo').services[copyIndex('routingRules')].patternsToMatch]",
            "enabledState": "Enabled",
            // "cacheConfiguration": null,
            "routeConfiguration": {
              "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
              "customForwardingPath": null,
              "forwardingProtocol": "HttpsOnly",
              "backendPool": {
                "id": "[resourceId('Microsoft.Network/frontdoors/backendPools',
                                      concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').Name),
                                      parameters('frontDoorInfo').services[copyIndex('routingRules')].Name)]"
              }
            }
          }
        }
      }
    ]
  },
  "resources": [
    {
      "name": "[concat('dp',parameters('Deployment'),'-AFD-BEDeploy-',parameters('frontDoorInfo').Name,'-',parameters('frontDoorInfo').services[CopyIndex(0)].Name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-01-01",
      "copy": {
        "name": "afdservicesBELoop",
        "count": "[length( parameters('frontDoorInfo').services )]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('global')._artifactsLocation,'/','templates-nested/frontDoorBE.json', parameters('global')._artifactsLocationSasToken)]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "Deployment": {
            "value": "[parameters('Deployment')]"
          },
          "AFDService": {
            "value": "[parameters('frontDoorInfo').services[copyIndex(0)]]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('Stage').SetExternalDNS,1)]",
      "apiVersion": "2020-06-01",
      "name": "[concat('setdnsServices',copyIndex(0),'-',parameters('frontDoorInfo').name)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[if(contains(parameters('global'),'DomainNameExtRG'),parameters('global').DomainNameExtRG,parameters('global').GlobalRGName)]",
      "subscriptionId": "[if(contains(parameters('global'),'DomainNameExtSubscriptionID'),parameters('global').DomainNameExtSubscriptionID,parameters('global').SubscriptionID)]",
      "copy": {
        "name": "FD-Services-DNSLoop",
        "count": "[length( parameters('frontDoorInfo').services )]"
      },
      "dependsOn": [
        // "[concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name)]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Network/dnsZones/CNAME",
              // acu1-brw-aoa-s1-afd01-apim01-gateway.psthing.com  APIM behind AFD E.g. apim01-gateway or apim01
              "name": "[toLower(concat(parameters('global').DomainNameExt,'/',parameters('Deployment'),'-afd',parameters('frontDoorInfo').name,
                                        if(
                                            equals(parameters('frontDoorInfo').services[copyIndex(0)].Name,'Default'),'',
                                            concat('-',parameters('frontDoorInfo').services[copyIndex(0)].Name))
                                        ))]",
              "apiVersion": "2018-05-01",
              "properties": {
                "metadata": {},
                "TTL": 3600,
                "CNAMERecord": {
                  "cname": "[concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name,'.azurefd.net')]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name)]",
      "apiVersion": "2020-05-01",
      "type": "Microsoft.Network/frontdoors",
      "location": "global",
      "dependsOn": [
        "afdservicesBELoop"
      ],
      "properties": {
        "friendlyName": "[parameters('frontDoorInfo').name]",
        "enabledState": "Enabled",
        "frontendEndpoints": "[variables('frontendEndpoints')]",
        "healthProbeSettings": "[variables('healthProbeSettings')]",
        "loadBalancingSettings": "[variables('loadBalancingSettings')]",
        "routingRules": "[variables('routingRules')]",
        "backendPoolsSettings": {
          "enforceCertificateNameCheck": "Enabled",
          "sendRecvTimeoutSeconds": 30
        },
        "copy": [
          {
            "name": "backendPools",
            "count": "[length(parameters('frontDoorInfo').services)]",
            "input": {
              "name": "[parameters('frontDoorInfo').services[copyIndex('backendPools')].Name]",
              "properties": {
                "backends": "[reference(resourceId('Microsoft.Resources/deployments',concat('dp',parameters('Deployment'),'-AFD-BEDeploy-',parameters('frontDoorInfo').name,'-',parameters('frontDoorInfo').services[CopyIndex('backendPools')].Name)),'2017-05-10','Full').properties.outputs.backends.value]",
                "loadBalancingSettings": {
                  "id": "[resourceId('Microsoft.Network/frontdoors/loadBalancingSettings',
                                      concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name),
                                      parameters('frontDoorInfo').services[copyIndex('backendPools')].LBSettings)]"
                },
                "healthProbeSettings": {
                  "id": "[resourceId('Microsoft.Network/frontdoors/healthProbeSettings',
                                      concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name),
                                      parameters('frontDoorInfo').services[copyIndex('backendPools')].ProbeName)]"
                }
              }
            }
          }
        ]
      },
      "resources": [
        {
          "name": "Microsoft.Insights/service",
          "type": "providers/diagnosticSettings",
          "dependsOn": [
            "[concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name)]"
          ],
          "apiVersion": "2017-05-01-preview",
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "logs": [
              {
                "category": "FrontdoorAccessLog",
                "enabled": true
              },
              {
                "category": "FrontdoorWebApplicationFirewallLog",
                "enabled": true
              }
            ],
            "metrics": [
              {
                "timeGrain": "PT5M",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        }
      ]
    },
    {
      "condition": "[and(contains(parameters('frontDoorInfo').services[CopyIndex(0)],'EnableSSL'),equals(parameters('frontDoorInfo').services[CopyIndex(0)].EnableSSL,1))]",
      "name": "[concat('SetServicesCertificates',CopyIndex(1),'-',parameters('frontDoorInfo').name)]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(parameters('Deployment'),'-uaiNetworkContributor'))]": {}
        }
      },
      "dependsOn": [
        "[concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name)]"
      ],
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "copy": {
        "name": "ServicesCertificatesLoop",
        "count": "[length( parameters('frontDoorInfo').services )]"
      },
      "properties": {
        "azPowerShellVersion": "5.4",
        "arguments": "[format(' -ResourceGroupName {0} -FrontDoorName {1} -Name {2} -VaultID {3} -certificateUrl {4}', 
                                resourceGroup().name,
                                concat(parameters('Deployment'),'-afd',parameters('frontDoorInfo').name),
                                variables('frontendEndpoints')[CopyIndex(0)].name,
                                resourceId(parameters('Global').HubRGName,'Microsoft.Keyvault/vaults',parameters('Global').KVName),
                                parameters('Global').certificateUrl
                                )]",
        "scriptContent": "
                    param (
                        [string]$ResourceGroupName,
                        [string]$FrontDoorName,
                        [string]$Name,
                        [string]$VaultID,
                        [string]$certificateUrl
                    )
                    
                    try
                    {
                        Write-Output \"`nUTC is: \"
                        Get-Date
                        $c = Get-AzContext -ErrorAction stop
                        if ($c)
                        {
                            Write-Output \"`nContext is: \"
                            $c | select Account,Subscription,Tenant,Environment | fl | out-string
                            
                            $EndPoint = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName $ResourceGroupName -FrontDoorName $FrontDoorName -Name $Name -ErrorAction stop
                            #$EndPoint = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName ACU1-BRW-AOA-RG-S1 -FrontDoorName ACU1-BRW-AOA-S1-afd01 -Name APIM01-Gateway
                            if ($EndPoint.Vault)
                            {
                                Write-Output 'Provisioning CustomDomainHttp is complete!'
                            }
                            else 
                            {
                                # /subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-P0/providers/Microsoft.KeyVault/vaults/ACU1-BRW-AOA-P0-kvVLT01
                                # 
                                $SecretVersion = Split-Path -Path $certificateUrl -Leaf
                                $Secret = Split-Path -Path $certificateUrl
                                $SecretName = Split-Path -Path $Secret -Leaf
                                
                                Enable-AzFrontDoorCustomDomainHttps -ResourceGroupName $ResourceGroupName -FrontDoorName $FrontDoorName -FrontendEndpointName $Name -VaultId $VaultID -SecretName $SecretName -MinimumTlsVersion 1.2 -SecretVersion $SecretVersion
                            }
                        }
                        else 
                        {
                            throw 'Cannot get a context'
                        }
                    }
                    catch
                    {
                        Write-Warning $_
                        Write-Warning $_.exception
                    }
                ",
        "forceUpdateTag": "[parameters('now')]",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "timeout": "PT3M"
      }
    }
  ],
  "outputs": {
  }
}