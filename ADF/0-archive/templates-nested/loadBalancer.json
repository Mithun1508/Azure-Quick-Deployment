{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Deployment": {
      "type": "string"
    },
    "DeploymentID": {
      "type": "string"
    },
    "backEndPools": {
      "type": "array",
      "defaultValue": []
    },
    "NATRules": {
      "type": "array",
      "defaultValue": []
    },
    "NATPools": {
      "type": "array",
      "defaultValue": []
    },
    "outboundRules": {
      "type": "array",
      "defaultValue": []
    },
    "Services": {
      "type": "array",
      "defaultValue": []
    },
    "probes": {
      "type": "array",
      "defaultValue": []
    },
    "LB": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "OMSworkspaceID": {
      "type": "string"
    }
  },
  "variables": {
    "networkId": "[concat(parameters('Global').networkid[0],string(           sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID'))))))]",
    "networkIdUpper": "[concat(parameters('Global').networkid[0],string(add(1,sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID')))))))]",
    "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', concat(parameters('Deployment'),'-vn'))]",
    "copy": [
      {
        "name": "backEndPools",
        "count": "[Length(parameters('backEndPools'))]",
        "input": {
          "name": "[parameters('backEndPools')[copyIndex('backEndPools')]]"
        }
      },
      {
        "name": "NATPools",
        "count": "[Length(parameters('NATPools'))]",
        "input": {
          "name": "[parameters('NATPools')[copyIndex('NATPools')].Name]",
          "properties": {
            "protocol": "[parameters('NATPools')[copyIndex('NATPools')].protocol]",
            "frontendPortRangeStart": "[parameters('NATPools')[copyIndex('NATPools')].frontendPortRangeStart]",
            "frontendPortRangeEnd": "[parameters('NATPools')[copyIndex('NATPools')].frontendPortRangeEnd]",
            "backendPort": "[parameters('NATPools')[copyIndex('NATPools')].backendPort]",
            "frontendIPConfiguration": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/frontendIPConfigurations/',parameters('NATPools')[copyIndex('NATPools')].LBFEName)]"
            }
          }
        }
      },
      {
        "name": "probes",
        "count": "[Length(parameters('probes'))]",
        "input": {
          "name": "[parameters('probes')[copyIndex('probes')].ProbeName]",
          "properties": {
            "protocol": "Tcp",
            "port": "[parameters('probes')[copyIndex('probes')].LBBEProbePort]",
            "intervalInSeconds": 5,
            "numberOfProbes": 2
          }
        }
      },
      {
        "name": "loadBalancingRules",
        "count": "[Length(parameters('Services'))]",
        "input": {
          "name": "[parameters('Services')[copyIndex('loadBalancingRules')].RuleName]",
          "properties": {
            "frontendIPConfiguration": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/frontendIPConfigurations/',parameters('Services')[copyIndex('loadBalancingRules')].LBFEName)]"
            },
            "backendAddressPool": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/backendAddressPools/',parameters('LB').ASName)]"
            },
            "probe": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/probes/',parameters('Services')[copyIndex('loadBalancingRules')].ProbeName)]"
            },
            "protocol": "[if(contains(parameters('Services')[copyIndex('loadBalancingRules')],'protocol'),parameters('Services')[copyIndex('loadBalancingRules')].Protocol ,'tcp')]",
            "frontendPort": "[parameters('Services')[copyIndex('loadBalancingRules')].LBFEPort]",
            "backendPort": "[parameters('Services')[copyIndex('loadBalancingRules')].LBBEPort]",
            "enableFloatingIP": "[if(and(contains(parameters('Services')[copyIndex('loadBalancingRules')],'DirectReturn'),equals( parameters('Services')[copyIndex('loadBalancingRules')].DirectReturn,bool('true')) ),parameters('Services')[copyIndex('loadBalancingRules')].DirectReturn ,bool('false'))]",
            "loadDistribution": "[if(contains(parameters('Services')[copyIndex('loadBalancingRules')],'Persistance'),parameters('Services')[copyIndex('loadBalancingRules')].Persistance, 'Default')]",
            "disableOutboundSnat": false
          }
        }
      },
      {
        "name": "outboundRules",
        "count": "[Length(parameters('outboundRules'))]",
        "input": {
          "name": "[parameters('outboundRules')[copyIndex('outboundRules')].LBFEName]",
          "properties": {
            "protocol": "[parameters('outboundRules')[copyIndex('outboundRules')].protocol]",
            "enableTcpReset": "[parameters('outboundRules')[copyIndex('outboundRules')].enableTcpReset]",
            "idleTimeoutInMinutes": "[parameters('outboundRules')[copyIndex('outboundRules')].idleTimeoutInMinutes]",
            "frontendIPConfigurations": [
              {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/frontendIPConfigurations/',parameters('outboundRules')[copyIndex('outboundRules')].LBFEName)]"
              }
            ],
            "backendAddressPool": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(parameters('Deployment'),'-lb',parameters('LB').Name)),'/backendAddressPools/',parameters('outboundRules')[copyIndex('outboundRules')].LBFEName)]"
            }
          }
        }
      },
      {
        "name": "NATRules",
        "count": "[Length(parameters('NatRules'))]",
        "input": {
          "name": "[parameters('NATRules')[copyIndex('NATRules')].Name]",
          "properties": {
            "protocol": "[parameters('NATRules')[copyIndex('NATRules')].protocol]",
            "frontendPort": "[parameters('NATRules')[copyIndex('NATRules')].frontendPort]",
            "backendPort": "[parameters('NATRules')[copyIndex('NATRules')].backendPort]",
            "idleTimeoutInMinutes": "[parameters('NATRules')[copyIndex('NATRules')].idleTimeoutInMinutes]",
            "enableFloatingIP": "[parameters('NATRules')[copyIndex('NATRules')].enableFloatingIP]",
            "frontendIPConfiguration": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',
                                  concat(parameters('Deployment'),'-lb',parameters('LB').Name),
                                  parameters('NATRules')[copyIndex('NATRules')].LBFEName
                                )]"
            }
          }
        }
      },
      {
        "condition": "[equals(parameters('LB').Type,'Private')]",
        "name": "frontendIPConfigurationsPrivate",
        "count": "[length(parameters('LB').FrontEnd)]",
        "input": {
          "name": "[parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].LBFEName]",
          "properties": {
            "privateIPAllocationMethod": "Static",
            // "zones" : "[if(contains(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')],'zones'),
            //                 parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].zones,
            //                 createArray('1','2','3')
            //                 )]",
            "privateIPAddress": "[concat(
                                        if(
                                            and(
                                                contains(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')],'SNName'),
                                                equals(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].SNName,'MT02')
                                                ),
                                            variables('networkIdUpper'),
                                            variables('networkId')
                                        ),
                                        '.',
                                        if(
                                            contains(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')],'LBFEIP'),
                                            parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].LBFEIP,
                                            'NA'
                                          )
                                        )]",
            "subnet": {
              "id": "[concat(variables('VNetID'), '/subnets/sn',
                            if(
                                contains(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')],'SNName'),
                                parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].SNName,
                                'NA')
                              )]"
            }
          }
        }
      },
      {
        "condition": "[equals(parameters('LB').Type,'Public')]",
        "name": "frontendIPConfigurationsPublic",
        "count": "[length(parameters('LB').FrontEnd)]",
        "input": {
          "name": "[parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPublic')].LBFEName]",
          "properties": {
            // "zones" : "[if(contains(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')],'zones'),
            //                 parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].zones,
            //                 createArray('1','2','3')
            //                 )]",
            "publicIPAddress": {
              "id": "[string(resourceid('Microsoft.Network/publicIPAddresses',concat(parameters('Deployment'),'-',parameters('LB').Name,'-publicip', copyIndex('frontendIPConfigurationsPublic',1))))]"
            }
          }
        }
      }
    ]
  },
  "resources": [
    {
      "condition": "[equals(length(parameters('NATRules')),0)]",
      "name": "[concat(parameters('Deployment'),if(equals(length(parameters('NATRules')),0),'-lb',''),parameters('LB').Name)]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "sku": "[if(contains(parameters('LB'),'Sku'),json( concat('{\"name\":\"',parameters('LB').Sku,'\"}')),json('null'))]",
      "dependsOn": [],
      "properties": {
        "backendAddressPools": "[variables('backEndPools')]",
        "inboundNatPools": "[variables('NatPools')]",
        "outboundRules": "[variables('outboundRules')]",
        "loadBalancingRules": "[variables('loadBalancingRules')]",
        "probes": "[variables('probes')]",
        "frontendIPConfigurations": "[if(equals(parameters('LB').Type,'Private'),variables('frontendIPConfigurationsPrivate'),variables('frontendIPConfigurationsPublic'))]"
      },
      "resources": [
        {
          "condition": "[equals(length(parameters('NATRules')),0)]",
          "type": "providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "dependsOn": [
            "[concat(parameters('Deployment'),if(equals(length(parameters('NATRules')),0),'-lb',''),parameters('LB').Name)]"
          ],
          "apiVersion": "2015-07-01",
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "logs": [
              {
                "category": "LoadBalancerAlertEvent",
                "enabled": true
              },
              {
                "category": "LoadBalancerProbeHealthStatus",
                "enabled": true
              }
            ],
            "metrics": [
              {
                "timeGrain": "PT5M",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        }
      ]
    },
    {
      "condition": "[not(equals(length(parameters('NATRules')),0))]",
      "name": "[concat(parameters('Deployment'),if(equals(length(parameters('NATRules')),0),'','-lb'),parameters('LB').Name)]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "sku": "[if(contains(parameters('LB'),'Sku'),json( concat('{\"name\":\"',parameters('LB').Sku,'\"}')),json('null'))]",
      "dependsOn": [],
      "properties": {
        "backendAddressPools": [
          {
            "name": "[parameters('LB').ASName]"
          }
        ],
        "inboundNatRules": "[variables('NatRules')]",
        "outboundRules": "[variables('outboundRules')]",
        "loadBalancingRules": "[variables('loadBalancingRules')]",
        "probes": "[variables('probes')]",
        "frontendIPConfigurations": "[if(equals(parameters('LB').Type,'Public'),variables('frontendIPConfigurationsPublic'),variables('frontendIPConfigurationsPrivate'))]"
      },
      "resources": [
        {
          "condition": "[not(equals(length(parameters('NATRules')),0))]",
          "type": "providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "dependsOn": [
            "[concat(parameters('Deployment'),if(not(equals(length(parameters('NATRules')),0)),'-lb',''),parameters('LB').Name)]"
          ],
          "apiVersion": "2015-07-01",
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "logs": [
              {
                "category": "LoadBalancerAlertEvent",
                "enabled": true
              },
              {
                "category": "LoadBalancerProbeHealthStatus",
                "enabled": true
              }
            ],
            "metrics": [
              {
                "timeGrain": "PT5M",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "outputs": {
    "foo": {
      "type": "array",
      "value": "[parameters('NATRules')]"
    }
  }
}